-- ============================================================================
-- INICIO DE CARGA DE LIBRERÍA (Optimizado para compatibilidad máxima)
-- ============================================================================
local library
local load_success, load_error = pcall(function()
    -- Intento 1: Carga robusta con pcall y HttpGet directo
    local code = game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true)
    if code then
        library = loadstring(code)()
    end
end)

if not library then
    -- Si el entorno restringe loadstring(game:HttpGet()), el script fallará aquí.
    -- Se notifica el error de carga para que el usuario sepa que es un problema del exploit/entorno.
    warn("Error al cargar la librería de UI. El script puede no funcionar: " .. (tostring(load_error) or "Desconocido"))
    if game:GetService("StarterGui") then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error de Script (Clan JX7)",
            Text = "No se pudo cargar la librería de interfaz. Verifica tu exploit (Delta/Móvil).",
            Duration = 5,
        })
    end
    return -- Detiene la ejecución si la librería no se carga
end
-- ============================================================================
-- FIN DE CARGA DE LIBRERÍA
-- ============================================================================


-- Servicios (sin repeticiones)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local StarterPack = game:GetService("StarterPack")

-- Player
local player = Players.LocalPlayer
local LocalPlayer = Players.LocalPlayer

-- Variables globales
_G.whitelistedPlayers = _G.whitelistedPlayers or {}
if not table.find(_G.whitelistedPlayers, "MissSherya") then
    table.insert(_G.whitelistedPlayers, "MissSherya")
end

local connections = {}
local allActive = false

-- FunciÃ³n para manejar errores
local function safeCall(func, ...)
    local success, error = pcall(func, ...)
    if not success then
        warn("Error en script: " .. tostring(error))
    end
    return success
end

-- UI Window
local window = library:AddWindow("Clan JX7", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(600, 650),
    can_resize = true,
})

local mainTab = window:AddTab("Main")
local farmTab = window:AddTab("Farm")
local miscTab = window:AddTab("Misc")
local pets = window:AddTab("Pets")
local Stats = window:AddTab("Stats")
local calculator = window:AddTab("Calculator")
local Killing = window:AddTab("Killer")
local Teleport = window:AddTab("Teleport")
local creditsTab = window:AddTab("Credits")

-- ============================================================================
-- MAIN TAB
-- ============================================================================

-- Auto Brawls Folder
local BrawlFolder = mainTab:AddFolder("  Auto Brawls")

local godModeToggle = false
BrawlFolder:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0.1)
            end
        end)
    end
end)

local whitelist = {} 

local autoWinBrawlToggle = BrawlFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return false end
        local character = game.Players.LocalPlayer.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        local backpack = game.Players.LocalPlayer.Backpack
        if not backpack then return false end
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, player.Name) then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        return true
    end

    local function isLocalPlayerReady()
        local player = game.Players.LocalPlayer
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    -- Asegura que gameGui y brawlJoinLabel existen antes de acceder a ellos
                    local brawlLabel = game.Players.LocalPlayer.PlayerGui:FindFirstChild("gameGui") and 
                                       game.Players.LocalPlayer.PlayerGui.gameGui:FindFirstChild("brawlJoinLabel")
                    if brawlLabel and brawlLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        brawlLabel.Visible = false
                    end
                end)
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    local player = game.Players.LocalPlayer
                    pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                    pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
                end
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    local character = game.Players.LocalPlayer.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")
                    for _, player in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        pcall(function()
                            if isValidTarget(player) then
                                local targetRoot = player.Character.HumanoidRootPart
                                if leftHand then
                                    safeTouchInterest(targetRoot, leftHand)
                                end
                                if rightHand then
                                    safeTouchInterest(targetRoot, rightHand)
                                end
                            end
                        end)
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

BrawlFolder:AddSwitch("Auto Join Brawls", function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    -- Asegura que gameGui y brawlJoinLabel existen antes de acceder a ellos
                    local brawlLabel = game.Players.LocalPlayer.PlayerGui:FindFirstChild("gameGui") and 
                                       game.Players.LocalPlayer.PlayerGui.gameGui:FindFirstChild("brawlJoinLabel")
                    if brawlLabel and brawlLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        brawlLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

-- Jungle Gym Folder
local jungleGymFolder = mainTab:AddFolder("  Jungle Gym")

local function pressE()
    -- VirtualInputManager es la forma más común de simular teclas para exploits de PC/Mobile
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait(0.1)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift)
    end
end

jungleGymFolder:AddSwitch("Jungle Bench Press", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

jungleGymFolder:AddSwitch("Jungle Squat", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

jungleGymFolder:AddSwitch("Jungle Pull Ups", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

jungleGymFolder:AddSwitch("Jungle Boulder", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

-- All Gyms Folder
local farmGymsFolder = mainTab:AddFolder("  All Gyms")

local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

local workoutTypes = {"Bench Press", "Squat", "Deadlift", "Pull Up"}
local gymLocations = {"Eternal Gym", "Legend Gym", "Muscle King Gym"}
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Squat", 
    ["Deadlift"] = "Dead Lift",
    ["Pull Up"] = "Pull Up"
}

local gymToggles = {}
local selectedGym = {}

for _, workoutType in ipairs(workoutTypes) do
    local spanishWorkoutName = workoutTranslations[workoutType]
    
    local dropdown = farmGymsFolder:AddDropdown(spanishWorkoutName .. " - Gym", function(selected)
        selectedGym[workoutType] = selected
    end)
    
    for _, gymName in ipairs(gymLocations) do
        dropdown:Add(gymName)
    end
    
    local toggle = farmGymsFolder:AddSwitch(spanishWorkoutName, function(bool)
        getgenv().workingGym = bool
        getgenv().currentWorkoutType = workoutType
        
        if bool then
            local selectedGymName = selectedGym[workoutType] or gymLocations[1]
            
            if workoutPositions[workoutType] and workoutPositions[workoutType][selectedGymName] then
                for otherType, otherToggle in pairs(gymToggles) do
                    if otherType ~= workoutType and otherToggle then
                        otherToggle:Set(false)
                    end
                end
                teleportAndStart(workoutType, workoutPositions[workoutType][selectedGymName])
            end
        end
    end)
    
    gymToggles[workoutType] = toggle
end

-- Auto Snack Folder
local autoSnackFolder = mainTab:AddFolder("  Auto Snacks")

local activeSnacks = {
    ["Protein Shake"] = false,
    ["Energy Shake"] = false,
    ["TOUGH Bar"] = false,
    ["ULTRA Shake"] = false,
    ["Energy Bar"] = false,
    ["Protein Egg"] = false,
    ["Tropical Shake"] = false,
}

local snackConnections = {}

local function equipAndUse(itemName)
    local character = player.Character
    local backpack = player.Backpack
    
    if not character or not backpack then return end
    
    local tool = backpack:FindFirstChild(itemName)
    
    if tool then
        tool.Parent = character
        task.wait(0.1)
        
        local equippedTool = character:FindFirstChild(itemName)
        if equippedTool then
            -- Mando dos eventos de mouse para simular un clic en la pantalla (compatible con móvil)
            local viewportSize = workspace.CurrentCamera.ViewportSize
            local x, y = viewportSize.X / 2, viewportSize.Y / 2
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
            task.wait(0.01)
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
        end
    end
end

local function startSnackLoop(itemName)
    if snackConnections[itemName] then
        task.cancel(snackConnections[itemName])
        snackConnections[itemName] = nil
    end
    
    snackConnections[itemName] = task.spawn(function()
        while activeSnacks[itemName] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild(itemName) then
                equipAndUse(itemName)
                task.wait(0.5)
            else
                activeSnacks[itemName] = false
                print("No more " .. itemName .. " available!")
                break
            end
            
            task.wait(0.1)
        end
    end)
end

local function startProteinEggLoop()
    if snackConnections["Protein Egg"] then
        task.cancel(snackConnections["Protein Egg"])
        snackConnections["Protein Egg"] = nil
    end
    
    snackConnections["Protein Egg"] = task.spawn(function()
        while activeSnacks["Protein Egg"] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild("Protein Egg") then
                equipAndUse("Protein Egg")
                print("Protein Egg usado! Esperando 30 minutos...")
                task.wait(1800)
            else
                activeSnacks["Protein Egg"] = false
                print("No more Protein Egg available!")
                break
            end
        end
    end)
end

local function startTropicalShakeLoop()
    if snackConnections["Tropical Shake"] then
        task.cancel(snackConnections["Tropical Shake"])
        snackConnections["Tropical Shake"] = nil
    end
    
    snackConnections["Tropical Shake"] = task.spawn(function()
        while activeSnacks["Tropical Shake"] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild("Tropical Shake") then
                equipAndUse("Tropical Shake")
                print("Tropical Shake usado! Esperando 15 minutos...")
                task.wait(900)
            else
                activeSnacks["Tropical Shake"] = false
                print("No more Tropical Shake available!")
                break
            end
        end
    end)
end

local function stopSnackLoop(itemName)
    if snackConnections[itemName] then
        task.cancel(snackConnections[itemName])
        snackConnections[itemName] = nil
    end
end

for _, snackName in pairs({"Protein Shake", "Energy Shake", "Tough Bar", "Ultra Shake", "Energy Bar"}) do
    local displayName = snackName == "Tough Bar" and "TOUGH Bar" or (snackName == "Ultra Shake" and "ULTRA Shake" or snackName)
    
    autoSnackFolder:AddSwitch(snackName, function(state)
        activeSnacks[displayName] = state
        if state then
            startSnackLoop(displayName)
        else
            stopSnackLoop(displayName)
        end
    end)
end

autoSnackFolder:AddSwitch("Protein Egg 30 Minuts", function(state)
    activeSnacks["Protein Egg"] = state
    if state then
        startProteinEggLoop()
    else
        stopSnackLoop("Protein Egg")
    end
end)

autoSnackFolder:AddSwitch("Tropical Shake 15 Minuts", function(state)
    activeSnacks["Tropical Shake"] = state
    if state then
        startTropicalShakeLoop()
    else
        stopSnackLoop("Tropical Shake")
    end
end)

-- Extras Folder
local MSCCFolder = mainTab:AddFolder("  Extras")

MSCCFolder:AddSwitch("Lock Position", function(Value)
    if Value then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local currentPos = character.HumanoidRootPart.CFrame
            getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
                end
            end)
        end
    else
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

MSCCFolder:AddSwitch("Anti Knockback", function(Value)
    safeCall(function()
        local character = game.Players.LocalPlayer.Character
        if not character then return end
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then return end
        
        if Value then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.P = 1250
            bodyVelocity.Parent = rootPart
        else
            local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
            if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
                existingVelocity:Destroy()
            end
        end
    end)
end)

MSCCFolder:AddButton("Anti AFK", function()
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Anti AFK",
        Text = "Anti AFK se ha activado correctamente!",
        Duration = 3,
        Button1 = "OK"
    })
    
    local GC = getconnections or get_signal_cons
    if GC then
        for i, v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    
    task.spawn(function()
        while task.wait(30) do
            local VirtualUser = game:GetService("VirtualUser")
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end)

-- Farm Tab
local autoRockFolder = farmTab:AddFolder("  Auto Rock")

local function gettool()
    for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function createRockSwitch(name, selectRockName, durabilityRequirement)
    autoRockFolder:AddSwitch(name, function(Value)
        getgenv().autoFarm = Value
        
        if Value then
            task.spawn(function()
                while getgenv().autoFarm do
                    if not getgenv().autoFarm then break end
                    
                    pcall(function()
                        if LocalPlayer.Durability.Value >= durabilityRequirement then
                            local character = LocalPlayer.Character
                            if character and character:FindFirstChild("LeftHand") and character:FindFirstChild("RightHand") then
                                for i, v in pairs(Workspace:GetDescendants()) do
                                    if v.Name == "neededDurability" and v.Value == durabilityRequirement and v.Parent and v.Parent:FindFirstChild("Rock") then
                                        local rock = v.Parent.Rock
                                        firetouchinterest(rock, character.RightHand, 0)
                                        firetouchinterest(rock, character.RightHand, 1)
                                        firetouchinterest(rock, character.LeftHand, 0)
                                        firetouchinterest(rock, character.LeftHand, 1)
                                        gettool()
                                        break
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(0.1)
                end
            end)
        end
    end)
end

local rocks = {
    {"Tiny Rock", "Tiny Island Rock", 0},
    {"Starter Rock", "Starter Island Rock", 100},
    {"Legend Beach Rock", "Legend Beach Rock", 5000},
    {"Frozen Rock", "Frost Gym Rock", 150000},
    {"Mythical Rock", "Mythical Gym Rock", 400000},
    {"Eternal Rock", "Eternal Gym Rock", 750000},
    {"Legend Rock", "Legend Gym Rock", 1000000},
    {"Muscle King Rock", "Muscle King Gym Rock", 5000000},
    {"Jungle Rock", "Ancient Jungle Rock", 10000000}
}

for _, rockData in pairs(rocks) do
    createRockSwitch(rockData[1], rockData[2], rockData[3])
end

-- Auto Tools Folder
local autoEquipToolsFolder = farmTab:AddFolder("  Auto Tools")

autoEquipToolsFolder:AddButton("Gamepass AutoLift", function()
    safeCall(function()
        local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
        local player = game:GetService("Players").LocalPlayer
        for _, gamepass in pairs(gamepassFolder:GetChildren()) do
            local value = Instance.new("IntValue")
            value.Name = gamepass.Name
            value.Value = gamepass.Value
            value.Parent = player.ownedGamepasses
        end
    end)
end)

local function createAutoToolSwitch(toolName, globalVar)
    autoEquipToolsFolder:AddSwitch("Auto " .. toolName, function(Value)
        _G[globalVar] = Value
        
        if Value then
            task.spawn(function()
                local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
                if tool then
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                end
                
                while _G[globalVar] do
                    if not _G[globalVar] then break end
                    LocalPlayer.muscleEvent:FireServer("rep")
                    task.wait(0.1)
                end
            end)
        else
            local character = LocalPlayer.Character
            if character then
                local equipped = character:FindFirstChild(toolName)
                if equipped then
                    equipped.Parent = LocalPlayer.Backpack
                end
            end
        end
    end)
end

local tools = {
    {"Weight", "AutoWeight"},
    {"Pushups", "AutoPushups"},
    {"Handstands", "AutoHandstands"},
    {"Situps", "AutoSitups"}
}

for _, toolData in pairs(tools) do
    createAutoToolSwitch(toolData[1], toolData[2])
end

autoEquipToolsFolder:AddSwitch("Auto Punch", function(Value)
    _G.fastHitActive = Value
    
    if Value then
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = LocalPlayer.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0.1)
            end
        end)
        
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                
                local character = LocalPlayer.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool then
                        punchTool:Activate()
                    end
                end
                task.wait(0.1)
            end
        end)
    else
        local character = LocalPlayer.Character
        if character then
            local equipped = character:FindFirstChild("Punch")
            if equipped then
                equipped.Parent = LocalPlayer.Backpack
            end
        end
    end
end)

autoEquipToolsFolder:AddSwitch("Fast Tools", function(Value)
    _G.FastTools = Value
    
    local toolSettings = {
        {"Punch", "attackTime", Value and 0 or 0.35},
        {"Ground Slam", "attackTime", Value and 0 or 6},
        {"Stomp", "attackTime", Value and 0 or 7},
        {"Handstands", "repTime", Value and 0 or 1},
        {"Pushups", "repTime", Value and 0 or 1},
        {"Weight", "repTime", Value and 0 or 1},
        {"Situps", "repTime", Value and 0 or 1}
    }
    
    local backpack = LocalPlayer:WaitForChild("Backpack")
    
    for _, toolInfo in ipairs(toolSettings) do
        local tool = backpack:FindFirstChild(toolInfo[1])
        if tool and tool:FindFirstChild(toolInfo[2]) then
            tool[toolInfo[2]].Value = toolInfo[3]
        end
        
        local equippedTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(toolInfo[1])
        if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
            equippedTool[toolInfo[2]].Value = toolInfo[3]
        end
    end
end)

-- Auto Rebirths Folder
local Rebirth = farmTab:AddFolder("  Auto Rebirths")

local targetRebirthAmount = 1
local leaderstats = LocalPlayer:WaitForChild("leaderstats")
local MuscleEvent = LocalPlayer.muscleEvent
local repSpeed = 10

Rebirth:AddTextBox("Target Rebirth Amount", function(value)
    local amount = tonumber(value) or 1
    local currentRebirths = leaderstats.Rebirths.Value
    if amount >= currentRebirths then
        targetRebirthAmount = amount
    end
end, {clear = false})

local targetRebirthToggle = Rebirth:AddSwitch("Target Rebirth", function(enabled)
    if enabled then
        task.spawn(function()
            while enabled do
                local currentRebirths = leaderstats.Rebirths.Value
                local requiredStrength = 10000 + 5000 * currentRebirths
                
                if currentRebirths >= targetRebirthAmount then
                    targetRebirthToggle:Set(false)
                    break
                end
                
                if leaderstats.Strength.Value >= requiredStrength then
                    ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.7)
                else
                    for i = 1, repSpeed do
                        MuscleEvent:FireServer("rep")
                    end
                end
                
                task.wait(0.1)
            end
        end)
    end
end)

Rebirth:AddSwitch("Auto Rebirth (infinite)", function(state)
    if state then
        task.spawn(function()
            while state do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

Rebirth:AddSwitch("Auto Teleport King", function(state)
    if state then
        task.spawn(function()
            while state and task.wait(0) do
                local player = game.Players.LocalPlayer
                if player.Character then
                    player.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
    end
end)

Rebirth:AddSwitch("Auto Size 2", function(state)
    if state then
        task.spawn(function()
            while state and task.wait(0) do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
            end
        end)
    end
end)

-- Pack Farm Folder
local PackFarmFolder = farmTab:AddFolder("  Packs Farm")

local packRebirthValues = {
    [0] = 1, [1] = 2, [2] = 4, [3] = 6, [4] = 8, [5] = 10, [6] = 12, [7] = 14, [8] = 16
}

local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function unequipAllPets()
    local petsFolder = player.petsFolder
    if petsFolder then
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") then
                for _, pet in pairs(folder:GetChildren()) do
                    ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                end
            end
        end
    end
    task.wait(0.1)
end

local function equipSpecificPacks(packName, count)
    unequipAllPets()
    task.wait(0.2)

    local packs = {}
    if player.petsFolder and player.petsFolder:FindFirstChild("Unique") then
        for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
            if pet.Name == packName then
                table.insert(packs, pet)
            end
        end
    end

    local packsToEquip = math.min(count, #packs)
    for i = 1, packsToEquip do
        ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", packs[i])
        task.wait(0.1)
    end

    return packsToEquip
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    return machine
end

local isPositionLocked = false
local originalCFrame = nil
local function lockPosition(lock)
    isPositionLocked = lock
end
